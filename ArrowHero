package unit6;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.*;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.util.*;
import java.util.Scanner;

public class arrowhero extends JPanel implements MouseListener, KeyListener, Runnable {
	public static int gameState = 0; // game states
	public static int mouseX; // gets position of x
	public static int mouseY; // gets position of y
	public static int health = 392; // health of player
	public static int angle = -91; // angle of the rotating object starts at -90 since we need the object to start
									// at the top of the screen, and when I tried
	// 90 it went to the bottom so I tried -90 and it worked so im keeping it at
	// that
	public static int count = 2; // this variable is to make the object move faster and faster, it is used along
									// counter in order to make the object move faster after a certain ammount of
									// spins
	public static int counter = 1800; // using count, i subtract counter form count, and since count gets bigger every
										// angle, it will take approxipately, counter/360 spins before the object moves
										// faster
	public static int arrow = 0;// variable for which arrowkey
	public static LinkedList<Arrow> arrows = new LinkedList<Arrow>(); // 1, 4, 3, 2, 1, 1, 2
	public static int time = 31;
	public static int spawnTime = 31;//500/16ms to get 2 per second
	public static int decrease = 4;
	public static int scoreAddition = 0;
	public static int windowWidth= 680;
	public static int windowHeight = 928;
	public static int healthIncrease = 1;
	public static int maxSpeed = 10; //not used currently
	public static int currentscore = 0; // <- temporary
	public static String highscore;
	public static BufferedImage settings;
	public static BufferedImage heart;
	public static BufferedImage arrowup; // object image(s) but not done yet
	public static BufferedImage arrowdown; // object image(s) but not done yet
	public static BufferedImage arrowleft; // object image(s) but not done yet
	public static BufferedImage arrowright; // object image(s) but not done yet
	public static BufferedImage [] images;
	public static Scanner inputFile;
	public static PrintWriter outputFile;
	
	
	public static void main(String[] args) throws IOException {
		
		JFrame myFrame = new JFrame("Arrowhero");

		// Create a panel to put inside the frame
		arrowhero myPanel = new arrowhero();
		myFrame.add(myPanel);

		// Maximize your frame to the size of the panel
		myFrame.pack();

		// Set the visibility of the frame to visible
		myFrame.setVisible(true);
		inputFile = new Scanner(new File("highscore.txt"));
		outputFile = new PrintWriter(new FileWriter("highscore1.txt"));
		
		highscore = inputFile.nextLine();
		
		inputFile.close();
		
	}

	public arrowhero() {
		setPreferredSize(new Dimension(500,682)); // 320, 240 b288.5, 213
		setBackground(new Color(0, 0, 0));
		this.setFocusable(true);
		addKeyListener(this);
		try {
			
			settings = ImageIO.read(new File("settingsicon.jpeg"));
			heart = ImageIO.read(new File("heart.png"));
			images = new BufferedImage [5];
			images[1] = ImageIO.read(new File("left.png"));
			images[2] = ImageIO.read(new File("up.png"));
			images[3] = ImageIO.read(new File("right.png"));
			images[4] = ImageIO.read(new File("down.png"));
			
			 
			
		} catch (Exception e) {
			System.out.println("no image");

		}
		addMouseListener(this);
		Thread thread = new Thread(this);
		thread.start();
		// game states
		// 1 menu screen ( menu, cosmetics, key binds)
		// 2 game screen
		// win/lose screen
	}



	public void paintComponent(Graphics g) {
		if (gameState == 0) {
			
			// Background
			super.paintComponent(g);
			
			// Title
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 40));
			g.drawString("Arrow master", 115, 100);
			
			// Instructions
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("TimesRoman", Font.PLAIN, 20));
			g.drawString("Press a key to begin!", 175, 500);
			
			// Arrows
			g.drawImage(images[2], 220, 320, null);
			g.drawImage(images[4], 220, 400, null);
			g.drawImage(images[1], 140, 400, null);
			g.drawImage(images[3], 300, 400, null);
			
			// Settings
			g.drawImage(settings, 10, 630, null);
			
			// High Score
			g.setColor(new Color(220,220,220));
			g.setFont(new Font("Courier", Font.PLAIN, 15));
			g.drawString("Highscore: " + highscore, 190, 575);
			
		} else if (gameState == 1) {
			
			// Background
			super.paintComponent(g);
			
			// Circle at the top
			g.setColor(new Color(255,0,0));
			g.fillArc(200, 25, 100, 100, 45, 90);
			g.setColor(new Color(0,128,255));
			g.fillArc(200, 25, 100, 100, 315, 90);
			g.setColor(new Color(0,255,0));
			g.fillArc(200, 25, 100, 100, 135, 90);
			g.setColor(new Color(255,255,0));
			g.fillArc(200, 25, 100, 100, 225, 90);
			g.setColor(new Color(0,0,0));
			g.fillOval(208, 33, 84, 84);
			
			// Health Bar
			g.drawImage(heart, 25, 570, null);
			
			g.setColor(new Color(107,0,0));
			g.fillRect(75, 575, 400, 30); // <- dark red outline
			
			g.setColor(new Color(0,0,0)); // <- to mek the red rectangle look like an outline
			g.fillRect(79, 579, 392, 22);
			
			g.setColor(new Color(186,0,0));
			g.fillRect(79, 579, health, 22);
			
			// Current Score Display
			g.setColor(new Color(220,220,220));
			g.setFont(new Font("Courier", Font.PLAIN, 15));
			g.drawString("Score: " + currentscore, 215, 640);
		
			g.drawImage(images[arrow], 216,40,null);		
			System.out.println("TEST");
			// g.drawImage(menuScree, 0, 0, 800, 800, this);
			for(int i=0; i <arrows.size(); i++) {
				System.out.println(arrows.get(i).position);
				arrows.get(i).position -= count;
				g.drawImage(images[arrows.get(i).type], (int) (215 + 200 * Math.cos(arrows.get(i).position * Math.PI / 180)),
						(int) (235 + 200 * Math.sin(arrows.get(i).position * Math.PI / 180)), this);

			}
			counter -= count;
			if (counter < 0) {
				//count = Math.min(maxSpeed, count+1);
				count++;
				System.out.println(count);
				counter = 1800;
				spawnTime-=decrease;
				healthIncrease+=2;
			}

		}
		else if (gameState == 2) {
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 20));
			g.drawString("Great Job! You scored a total of " + currentscore, 50, 200);
			g.drawString("Highscore: " + highscore, 75, 400);
			g.drawString("Press space bar to restart", 75, 600);
		}
		else if(gameState == 3) {
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 20));
			g.drawString("Game Paused", 75, 400);
			g.drawString("Press space bar to unpause", 75, 600);
		}

	}

	@Override
	public void run() {
		while (true) {
			repaint();
			try {
				Thread.sleep(16); // The commands after while(true) but before try will execute once every 80
									// milliseconds
				
				if (gameState == 1) {
					if(time>=spawnTime) {
						arrows.add(new Arrow(angle, ((int)(Math.random()*(4-1+1))+1)));
						time = 0;
					}
					time++;
						if(!arrows.isEmpty()&& arrows.peek().position<=-440) {
							if(arrows.peek().type == arrow) {
								currentscore+= scoreAddition;
								scoreAddition++;
								if(health < 392) {
									health+=healthIncrease;
								}
								
							}
							else {
								health-=25;
							}
							arrows.poll();
						}
						if (health < 0) {
							gameState = 2;
							if(currentscore > Integer.parseInt(highscore)) {
								outputFile.print(currentscore);
								outputFile.close();
								
							}
						}
						

					
					
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		if(gameState == 0) {
			if(e.getKeyCode()>0) {
				gameState =1;
			}
		}
		// TODO Auto-generated method stub
		if(gameState == 1) {
			if(e.getKeyCode() == 32) {
				gameState = 3;
			}
			if (e.getKeyCode() >= 37 && e.getKeyCode() <= 40) {
				arrow = e.getKeyCode() - 36;
				
			}
			
		}
		if(gameState == 2) {
			if (e.getKeyCode()==32) {
				count = 2;
				counter = 1800; 
				gameState = 1;
				health = 392;
				spawnTime = 31;//500/16ms to get 2 per second
				decrease = 4;
				scoreAddition = 0;
				currentscore = 0;
				time = 31;
				healthIncrease = 1;
			}
		}
		if(gameState == 3) {
			if(e.getKeyCode() == 32) {
				gameState = 1;
			}
		}
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		mouseX = e.getX();
		mouseY = e.getY();
		if (gameState == 0) {
			if (0 <= mouseX && mouseX <= 680 && 0 <= mouseY && mouseY <= 928) {
				gameState = 1;
				paintComponent(this.getGraphics());
			}
		}
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub

	}

	// x pos is radius * cossine of angle
	// y pos is the radius * sine of the angle
	public static class Arrow{ //
		int position;
		int type;
		
		public Arrow (int px, int tx) {
			position = px;
			type = tx;
		}
	}
}
