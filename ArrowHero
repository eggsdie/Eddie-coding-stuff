
package unit6;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.*;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.util.*;


public class arrowhero extends JPanel implements MouseListener, KeyListener, Runnable {
	public static int gameState = 0;
	public static int mouseX;
	public static int mouseY;
	public static int turn = 1;
	public static int angle = -90;
	public static int count = 1;
	public static int counter = 360;
	BufferedImage menuScreen;
	BufferedImage image2;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		JFrame myFrame = new JFrame("Arrowhero");
		
		// Create a panel to put inside the frame
		arrowhero myPanel = new arrowhero(); 
		myFrame.add(myPanel);
		
		// Maximize your frame to the size of the panel
		myFrame.pack();
		
		// Set the visibility of the frame to visible
		myFrame.setVisible(true);	
		
		
	}
	
	public arrowhero () {
		setPreferredSize(new Dimension(640,480)); //320, 240   b288.5, 213
		setBackground(new Color(255,255,255));
		this.setFocusable(true);
		addKeyListener(this);
		try {
			//menuScreen = ImageIO.read(new File("arrowheromenu.png"));
			image2 = ImageIO.read(new File("mario.png"));
		}
		catch (Exception e) {
			System.out.println("no image");

		}
		addMouseListener(this);
		Thread thread = new Thread(this);
		thread.start();
		//game states
		//1 menu screen ( menu, cosmetics, keybinds)
		//2 game screen 
		//win/lose screen
	}
	
	public static Point getPointOnCircle(int angle, int radius) {

	    // Calculate the outter point of the line
	    int xPosy = (int) (100 + radius*Math.cos(angle*Math.PI/180));
	    int yPosy = (int) (100 + radius*Math.sin(angle*Math.PI/180));

	    return new Point(xPosy, yPosy);

	}
	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		//g.drawImage(menuScreen, 0, 0, 800, 800, this);
		angle-=count;
		g.drawImage(image2, (int) (288 + 200*Math.cos(angle*Math.PI/180)), (int) (213 + 200*Math.sin(angle*Math.PI/180)), this);
		counter-=count;
		if(counter<0) {
			count++;
			counter=3600;
		}
		
	}
	@Override
	public void run()
	{
		while(true)
		{
			repaint();
			try
			{	
				Thread.sleep(16); // The commands after while(true) but before try will execute once every 80 milliseconds
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
	
	//x pos is radius * cossine of angle 
	//y pos is the radius * sine of the angle

}

