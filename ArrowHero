// Necessary Imports
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.*;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import java.util.*;
import java.util.Scanner;

public class arrowhero extends JPanel implements MouseListener, KeyListener, Runnable {
	
	// Things to improve
	/* dont read highscore in the start, update in the end
	 * make sure highscore is just 1 file where it overrides
	 * light mode, dark mode
	 * settings for background music, mode
	 * effects. ex: making the circle at the top bigger and smaller, use fading?
	 */
	
	// Class Variables
	public static int gameState = 0; // game states
	public static int mouseX; // gets position of x
	public static int mouseY; // gets position of y
	public static int health = 392; // full health of player, 392 because that is the pixel length of used rectangle
	public static int angle = -91; // angle of the rotating object starts at -90 since we need the object to start
	public static double count = 2; 	// to make the object move faster and faster, it is used along
				    	// counter in order to make the object move faster after a certain ammount of spins
	public static int counter = 1800; 	// using count, i subtract counter form count, and since count gets bigger every
						// angle, it will take approxipately, counter/360 spins before the object moves faster
	public static int arrow = 0;// variable for which arrowkey
	public static LinkedList<Arrow> arrows = new LinkedList<Arrow>(); // array of unlimited length to hold currently spinning arrows
	public static int time = 31; // used to check how long has it been since last arrow spawned
	public static int spawnTime = 50; //500/16ms to get 2 arrows per second
	public static int decrease = 4; // used to decrease spawntime speed, making arrows spawn faster
	public static int scoreAddition = 1; // amount of points given to the user after each successful arrow correlation
	public static int healthIncrease = 5; // health given back to the user after points are acheived, if the bar is not already full
	public static int maxScore = 25; // to set a max limit speed at which arrows can move
	public static int currentscore = 0; // counting total score of the user in 1 run
	public static BufferedImage settings; // settings icon
	public static BufferedImage heart; // heart icon
	public static BufferedImage endscreen; // big arrow on end screen
	public static BufferedImage arrowup; // up arrow
	public static BufferedImage arrowdown; // down arrow
	public static BufferedImage arrowleft; // left arrow
	public static BufferedImage arrowright; // right arrow
	public static int [] messages = new int[3];
	public static String [] messagestext = new String [] {"Keep trying!", "Looking good!", "Amazing!"};
	public static BufferedImage [] images; // an array to store all arrow variations
	public static BufferedImage [] indication;
	public static Scanner inputFile; // scanner to read stored highscore
	public static PrintWriter outputFile; // to stream the new highscore into the text file
	public static int scoreAdd = 1;
	public static int healthDecrease = 25;
	public static String username = "";
	public static String name1;
	public static String score1;
	public static String name2;
	public static String score2;
	public static String name3;
	public static String score3;
	
	public static void main(String[] args) throws IOException {
		
		JFrame myFrame = new JFrame("Arrowhero");

		// Create a panel to put inside the frame
		arrowhero myPanel = new arrowhero();
		myFrame.add(myPanel);

		// Maximize your frame to the size of the panel
		myFrame.pack();

		// Set the visibility of the frame to visible
		myFrame.setVisible(true);
		
		// Reading the user's highscore stored in text file
		inputFile = new Scanner(new File("highscore.txt"));
		name1 = inputFile.next();
		score1 = inputFile.next();
		name2 = inputFile.next();
		score2 = inputFile.next();
		name3 = inputFile.next();
		score3 = inputFile.next();
	}

	public arrowhero() {
		
		// JPanel dimensions and colour
		setPreferredSize(new Dimension(500,682));
		setBackground(new Color(0, 0, 0));
		
		this.setFocusable(true);
		addKeyListener(this);
		
		try {
			// Determining which images to use for declared BufferedImages
			settings = ImageIO.read(new File("settingsicon.jpg"));
			heart = ImageIO.read(new File("heart.png"));
			endscreen = ImageIO.read(new File("endscreen.png"));
			images = new BufferedImage [5];
			images[1] = ImageIO.read(new File("left.png"));
			images[2] = ImageIO.read(new File("up.png"));
			images[3] = ImageIO.read(new File("right.png"));
			images[4] = ImageIO.read(new File("down.png"));
			indication = new BufferedImage [5];
			indication[1] = ImageIO.read(new File("leftindication.png"));
			indication[2] = ImageIO.read(new File("upindication.png"));
			indication[3] = ImageIO.read(new File("rightindication.png"));
			indication[4] = ImageIO.read(new File("downindication.png"));
		
		} catch (Exception e) {
			System.out.println("no image");

		}
		
		addMouseListener(this);
		Thread thread = new Thread(this);
		thread.start();
		
	}



	public void paintComponent(Graphics g) {
		
		if (gameState == 0)
		{
			super.paintComponent(g);
			
			g.drawImage(endscreen, 150, 200, null);
			
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Monospaced", Font.BOLD, 40));
			g.drawString("Welcome to", 130, 100);
			g.drawString("Arrow Master!", 100, 140);
			
			g.setFont(new Font("Monospaced", Font.ITALIC, 15));
			g.drawString("Please type a username below and press enter: ", 50, 465);
			g.setFont(new Font("Monospaced", Font.BOLD, 20));
			g.drawString(username, 250-username.length()*5, 490);
		}
		
		// Menu Screen
		else if (gameState == 1) {
			
			// Background
			super.paintComponent(g);
			
			// Title
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 40));
			g.drawString("Arrow master", 115, 100);
			
			// Instructions
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Monospaced", Font.PLAIN, 20));
			g.drawString("Press a key to begin!", 135, 500);
			
			// Arrows
			g.drawImage(images[2], 220, 320, null);
			g.drawImage(images[4], 220, 400, null);
			g.drawImage(images[1], 140, 400, null);
			g.drawImage(images[3], 300, 400, null);
			
			// Settings
			g.drawImage(settings, 10, 630, null);
			
			// High Score
			
			g.setColor(new Color(220,220,220));
			g.setFont(new Font("Monospaced", Font.BOLD, 15));
			g.drawString("HIGHSCORES", 215, 540);
			g.setFont(new Font("Monospaced", Font.PLAIN, 15));
			g.drawString("1. " + name1 + ": " + score1, 210, 560);
			g.drawString("2. " + name2 + ": " + score2, 210, 575);
			g.drawString("3. " + name3 + ": " + score3, 210, 590);
			
			
		
		// Game Screen
		} else if (gameState == 2) {
			
			// Background
			super.paintComponent(g);
			
			// Circle at the top
			g.setColor(new Color(255,0,0));
			g.fillArc(200, 25, 100, 100, 45, 90);
			g.setColor(new Color(0,128,255));
			g.fillArc(200, 25, 100, 100, 315, 90);
			g.setColor(new Color(0,255,0));
			g.fillArc(200, 25, 100, 100, 135, 90);
			g.setColor(new Color(255,255,0));
			g.fillArc(200, 25, 100, 100, 225, 90);
			g.setColor(new Color(0,0,0));
			g.fillOval(208, 33, 84, 84);
			
			// Health Bar
			g.drawImage(heart, 25, 570, null);
			
			g.setColor(new Color(107,0,0));
			g.fillRect(75, 575, 400, 30); // <- dark red outline
			
			g.setColor(new Color(0,0,0)); // <- to make the red rectangle look like an outline
			g.fillRect(79, 579, 392, 22);
			
			g.setColor(new Color(186,0,0));
			g.fillRect(79, 579, health, 22);
			
			// Current Score Display
			g.setColor(new Color(220,220,220));
			g.setFont(new Font("Courier", Font.PLAIN, 15));
			g.drawString("Score: " + currentscore, 215, 640);
		
			// Spawning Arrows
			g.drawImage(indication[arrow], 225, 50, null);		
			System.out.println("TEST");

				for(int i = 0; i <arrows.size(); i++) {
					System.out.println(arrows.get(i).position);
					arrows.get(i).position -= count;
					g.drawImage(images[arrows.get(i).type], (int) (215 + 200 * Math.cos(arrows.get(i).position * Math.PI / 180)),
							(int) (235 + 200 * Math.sin(arrows.get(i).position * Math.PI / 180)), this);
					count += 0.0001;
					System.out.println(count);
					
				}
				
				for (int i = 0; i < messages.length; i++)
				{
					if (messages[i] > 0)
					{
						messages[i] -= 1;
						g.setColor(new Color(255,255,255));
						g.setFont(new Font("Courier", Font.PLAIN, 20));
						g.drawString(messagestext[i], 200, 200 + messages[i]);
					}
				}
			
			
			
			counter -= count; 
			
			// Increasing Speed
			if (counter < 0) {
				//count = Math.min(maxSpeed, count+1);
				//count++;
				if(scoreAddition>maxScore) {
					scoreAddition= maxScore;
				}
				System.out.println(count);
				counter = 1800;
				spawnTime-=decrease;
				healthIncrease+=5;
				scoreAddition+=scoreAdd;
				scoreAdd++;
				healthDecrease+=5;
			}
		}
		
		// Game Over Screen
		else if (gameState == 3) {
			super.paintComponent(g);
			
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 20));
			g.drawString("Great Job! You scored a total of " + currentscore, 50, 150);
			g.drawString("Highscore: " + score1, 165, 450);
			g.drawString("Press space bar to restart!", 90, 600);
			
			g.drawImage(endscreen, 150, 200, null);
			
		}
		
		// Game Paused Screen
		else if(gameState == 4) {
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 20));
			g.drawString("Game Paused", 75, 400);
			g.drawString("Press space bar to unpause", 75, 600);
		}
		else if(gameState == 5) {
			g.setColor(new Color(255,255,255));
			g.setFont(new Font("Courier", Font.BOLD, 20));
			g.drawString("test if this works",75, 400);
		}

	}

	public void run() {
		while (true) {
			repaint();
			try {
			
				Thread.sleep(16); // The commands after while(true) but before try will execute once every 80 milliseconds
				
				if (gameState == 2) {
					
			
						// Checking if a new arrow can spawn yet
						if(time>=spawnTime) {
							arrows.add(new Arrow(angle, ((int)(Math.random()*(4-1+1))+1)));
							time = 0;
						}
						
						time++;
						
						// Giving score and health if entered arrow matches
						if(!arrows.isEmpty()&& arrows.peek().position<=-440) {
							if(arrows.peek().type == arrow) {
								currentscore+= scoreAddition;
								if(health < 392) {
									health+=healthIncrease;
								}
								
							}
							else {
								health-=healthDecrease;
								messages[0] = 20;
								
							}
							arrows.poll(); // deleting the first value of the LinkedList, no that it has been checked
						}
						
						// Game Over if the user runs out of health
						if (health < 0) {
							
							int intscore1 = Integer.parseInt(score1);
							int intscore2 = Integer.parseInt(score2);
							int intscore3 = Integer.parseInt(score3);
									
							
							if (currentscore > intscore1)
							{
								name3 = name2;
								intscore3 = intscore2;
								name2 = name1;
								intscore2 = intscore1;
								intscore1 = currentscore;
							}
							else if (currentscore > intscore2)
							{
								name3 = name2;
								intscore3 = intscore2;
								name2 = username;
								intscore2 = currentscore;
							}
							else if (currentscore > intscore3)
							{
								name3 = username;
								intscore3 = currentscore;
							}
							
							outputFile = new PrintWriter(new FileWriter("highscore.txt"));
							outputFile.println(name1 + " " + intscore1);
							outputFile.println(name2 + " " + intscore2);
							outputFile.println(name3 + " " + intscore3);
							outputFile.close();	
						
							gameState = 3;
						}	
					
				}
			}
			
			catch (Exception e) {
				e.printStackTrace();
			}

		}
	}

	public void keyPressed(KeyEvent e) {
		
		if (gameState == 0)
		{
			if (e.getKeyCode() >= 65 && e.getKeyCode() <= 90)
			{
				if (username.length() <= 9)
				{
					username += e.getKeyChar();
				}
			}
			
			if (e.getKeyCode() == 8 && username.length() > 0)
			{
				username = username.substring(0, username.length()-1);
			}
			
			if (username.length() > 0 && e.getKeyCode() == 10)
			{
				gameState = 1;
			}
			
		}
		
		
		// Switching over to game screen if any key is pressed
		if(gameState == 1) {
			if(e.getKeyCode() > 0 && e.getKeyCode() != 10) {
				gameState = 2;
			}
		}
		
		// Reading the entered arrow key of the user
		if(gameState == 2) {
			if(e.getKeyCode() == 32) {
				gameState = 4;
			}
			if (e.getKeyCode() >= 37 && e.getKeyCode() <= 40) {
				arrow = e.getKeyCode() - 36;
				
			}
			
		}
		
		// Resetting all variables if Game Over
		if(gameState == 3) {
			if (e.getKeyCode()==32) {
				count = 2;
				counter = 1800; 
				gameState = 2;
				health = 392;
				spawnTime = 31;//500/16ms to get 2 per second
				decrease = 4;
				scoreAddition = 5;
				currentscore = 0;
				time = 31;
				healthIncrease = 1;
				arrows.clear();
				arrow=0;
			}
		}
		
		// Back to Game Screen from Pause Screen if space key is pressed
		if(gameState == 4) {
			if(e.getKeyCode() == 32) {
				gameState = 2;
			}
		}
		
	}
	
	// Setting up arrow data structure
	public static class Arrow {
		
		// x pos is radius * cossine of angle
		// y pos is the radius * sine of the angle
		
		float position;
		int type;
		
		public Arrow (float px, int tx) {
			position = px;
			type = tx;
		}
	}
	
	// This method is used to start the game if the user clicks anywhere on the menu screen
	public void mousePressed(MouseEvent e) {
		mouseX = e.getX();
		mouseY = e.getY();
		if (gameState == 1) {
			//10+40, 630+40
			if (10 <= mouseX && mouseX <= 50 && 630 <= mouseY && mouseY <= 670) {
				gameState = 5;
				paintComponent(this.getGraphics());
			}
		}
	}
	
	
	// Useless Methods
	public void keyTyped(KeyEvent e) {}
	public void keyReleased(KeyEvent e) {}
	public void mouseClicked(MouseEvent e) {}
	public void mouseReleased(MouseEvent e) {}
	public void mouseEntered(MouseEvent e) {}
	public void mouseExited(MouseEvent e) {}

	
}
